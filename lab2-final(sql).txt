CREATE TABLE BOOKS
(
    BOOK_ID INT PRIMARY KEY,
    TITLE VARCHAR(20),
    AUTHOR_ID INT,
    ISBN INT,
    PUBLISHED_YEAR VARCHAR(4)
);

CREATE TABLE AUTHORS
(
    AUTHOR_ID INT PRIMARY KEY,
    NAME VARCHAR(20),
    BIRTH_DATE date,
    COUNTRY VARCHAR(20)
);

CREATE TABLE BORROWERS
(
    BORROWER_ID INT PRIMARY KEY,
    NAME varchar(20),
    EMAIL VARCHAR(30),
    PHONE VARCHAR(15)
);

CREATE TABLE LOANS
(
    LOAN_ID INT PRIMARY KEY,
    BOOK_ID INT,
    BORROWER_ID INT,
    LOAN_DATE DATE,
    RETURN_DATE DATE,
    RETURNED BOOLEAN,
    FOREIGN KEY (BOOK_ID) REFERENCES BOOKS(BOOK_ID),
    FOREIGN KEY (BORROWER_ID) REFERENCES BORROWERS(BORROWER_ID)
);

INSERT INTO BOOKS(BOOK_ID, TITLE, AUTHOR_ID, ISBN, PUBLISHED_YEAR)
(
    VALUES (1, 'WE WERE LIARS', 1, 3, 2019),
        (2, 'ATOMIC HABITS', 2, 2, 2019 ),
        (3, 'MARVEL COMICS', 3, 3, 1998)
);

INSERT INTO AUTHORS(AUTHOR_ID, NAME, BIRTH_DATE, COUNTRY)
(
    VALUES (4, 'E LOCKHART', '1977-8-7', 'ENGLAND'),
            (5, 'JAMES CLEAR', '1996-20-7', 'BELGIUM'),
            (6, 'STAN LEE', '1923-10-5', 'USA')
);

INSERT INTO BORROWERS(BORROWER_ID, NAME, EMAIL, PHONE)
(
    VALUES (1, 'SAMI', 'SAMI@MAIL.COM', '71757973'),
           (2, 'DANI', 'DANI@MAIL.COM', '81765432'),
           (3, 'JANE', 'JANE@MAIL.COM', '72767896'),
            (15,'JOSEPH', 'JOSEPH@MAIL.COM', '75269574')
);

INSERT INTO LOANS(LOAN_ID, BOOK_ID, BORROWER_ID, LOAN_DATE, RETURN_DATE, RETURNED)
(
    VALUES (8, 1, 2, '2024-7-2', '2024-8-1', 'no'),
        (9, 2, 2, '2025-6-26', '2025-7-26', 'no'),
        (10, 2, 1, '2025-5-6', '2025-5-8', 'yes')
);

SELECT * FROM BOOKS WHERE PUBLISHED_YEAR='2019';
SELECT * FROM LOANS WHERE RETURNED='FALSE'; /*if i only want to see the loans*/
SELECT L.LOAN_ID, B.TITLE, L.RETURNED FROM LOANS L, BOOKS B WHERE B.BOOK_ID = L.BOOK_ID AND RETURNED='FALSE'; /*OVERDUE LOANS WITH BOOK NAMES*/
SELECT R.NAME, R.BORROWER_ID, B.TITLE FROM LOANS L, BOOKS B, BORROWERS R WHERE B.BOOK_ID=L.BOOK_ID AND R.BORROWER_ID=L.BORROWER_ID AND L.BORROWER_ID='1';
SELECT COUNT(BOOK_ID) AS TOTAL_BOOK_NB FROM BOOKS;

CREATE VIEW POPULAR_BOOKS AS SELECT B.TITLE, COUNT(L.BOOK_ID) AS NUMBER_OF_LOANS FROM BOOKS B, LOANS L WHERE B.BOOK_ID=L.BOOK_ID GROUP BY B.TITLE ORDER BY NUMBER_OF_LOANS DESC LIMIT 1;

CREATE OR REPLACE PROCEDURE BorrowBook(
    BORROWER_ID1 INT,
    NAME1 varchar(20),
    EMAIL1 VARCHAR(30),
    PHONE1 VARCHAR(15),
    LOAN_ID1 INT,
    BOOK_ID1 INT,
    LOAN_DATE1 DATE,
    RETURN_DATE1 DATE,
    RETURNED1 BOOLEAN
)
LANGUAGE plpgsql
AS $$
BEGIN
    IF EXISTS(
        SELECT 1 FROM LOANS
                 WHERE BOOK_ID=BOOK_ID1 AND RETURNED=FALSE
    )THEN
        RAISE EXCEPTION 'BOOK IS LOANED AND NOT RETURNED YET';
    end if;

    INSERT INTO BORROWERS(BORROWER_ID, NAME, EMAIL, PHONE)
    VALUES(BORROWER_ID1, NAME1, EMAIL1, PHONE1);

    INSERT INTO LOANS(LOAN_ID, BOOK_ID, BORROWER_ID, LOAN_DATE, RETURN_DATE, RETURNED)
    VALUES (LOAN_ID1, BOOK_ID1, BORROWER_ID1, LOAN_DATE1, RETURN_DATE1, RETURNED1);
END;
$$;

CREATE OR REPLACE PROCEDURE ReturnBook(
    BOOK_ID1 INT,
    BORROWER_ID1 INT
)
LANGUAGE plpgsql
AS $$
BEGIN
    UPDATE LOANS
    SET RETURNED=TRUE,
        RETURN_DATE=CURRENT_DATE
    WHERE BOOK_ID=BOOK_ID1 AND BORROWER_ID=BORROWER_ID1
        AND RETURNED=FALSE;

    IF NOT FOUND THEN RAISE EXCEPTION 'NO LOAN FOUND FOR THIS BOOK';
    END IF;
END;
$$;

CALL BorrowBook(15, 'JOSEPH', 'JOSEPH@MAIL.COM', '75747276', 13, 3, '2016-5-1', '2016-6-1', 'NO');
CALL ReturnBook(2, 2)

